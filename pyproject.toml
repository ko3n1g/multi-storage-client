[tool.poetry]
name = "multi-storage-client"
version = "0.12.2"
description = "Unified high-performance Python client for object and file stores."
authors = ["NVIDIA Multi-Storage Client Team"]
license = "Apache-2.0"
readme = "README.md"
packages = [
    { include = "multistorageclient", from = "src" }
]
repository = "https://github.com/NVIDIA/multi-storage-client"

[tool.poetry.dependencies]
python = "^3.8.1"
datasketches = "^5.1.0"
filelock = "^3.14.0"
jsonschema = "^4"
numpy = [
    { version = "<1.25.0", python = "~3.8" },
    { version = ">=1.24.0", python = "^3.9" }
]
opentelemetry-api = "^1.24.0"
opentelemetry-sdk = "^1.24.0"
opentelemetry-exporter-otlp-proto-http = "^1.24.0"
python-dateutil = "^2.7.0"
pyyaml = "^6"

aistore = { version = ">=1.8.1", optional = true }
azure-storage-blob = { version = ">=12.0.0", optional = true }
boto3 = { version = ">=1.28.17,<1.36.0", optional = true }
fsspec = { version = ">=2022.8.2", optional = true }
google-cloud-storage = { version = ">=2.10.0", optional = true }
oci = { version = ">=2.117.0", optional = true }
torch = { version = "^2.0.0", optional = true }
xarray = [
    { version = "<=2023.1.0", python = "<3.9" },
    { version = ">=2023.10.0", python = "^3.9" }
]
zarr = { version = ">=2.15.0", optional = true }

[tool.poetry.extras]
# Storage providers.
aistore = ["aistore"]
azure-storage-blob = ["azure-storage-blob"]
boto3 = ["boto3"]
google-cloud-storage = ["google-cloud-storage"]
oci = ["oci"]

# Higher-level libraries.
fsspec = ["fsspec"]
torch = ["torch"]
xarray = ["xarray"]
zarr = ["zarr"]

[tool.poetry.group.dev.dependencies]
pip-licenses = [
    { version = "^4", python = "<3.9" },
    { version = "^5", python = "^3.9" }
]
types-PyYAML = "^6"
types-python-dateutil = ">=2.8.2"
types-requests = "^2.31.0.3"
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
pytest-forked = "^1.6.0"
sphinx = "^7"
sphinx-copybutton = "^0"
sphinx-pyproject = "^0"
furo = ">=2024.5.6"

[tool.poetry.plugins."fsspec.specs"]
msc = "multistorageclient.contrib.async_fs.MultiAsyncFileSystem"

[tool.poetry.scripts]
msc-benchmark = "multistorageclient.commands.msc_benchmark:main"

[tool.pip-licenses]
format = "markdown"
order = "license"
output-file = ".licenses.md"
with-urls = true

[tool.pyright]
include = ["src", "tests"]

[tool.pytest.ini_options]
testpaths = ["tests/unit"]

[tool.ruff]
indent-width = 4
line-length = 120

[tool.ruff.format]
docstring-code-format = true
indent-style = "space"

[tool.ruff.lint]
fixable = ["ALL"]
unfixable = []

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
