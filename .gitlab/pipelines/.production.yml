#
# GitLab CI configuration.
#
# https://docs.gitlab.com/ee/ci/yaml
#

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"

stages:
  - Pipeline

default:
  # This is a very minimal Linux with just Nix. It's not NixOS.
  image: nixos/nix:latest

variables:
  # So we don't have to do `nix --experimental-features "nix-command flakes"` every time.
  #
  # https://nixos.org/manual/nix/stable/command-ref/env-common#env-NIX_CONFIG
  NIX_CONFIG: |
    experimental-features = nix-command flakes

#
# Jobs.
#

# Properties we can't set with `default`.
.default:
  stage: Pipeline
  environment:
    name: Production
    action: access

Publish Package:
  extends:
    - .default
  variables:
    URM_ARTIFACTORY_URL: https://urm.nvidia.com/artifactory
    URM_ARTIFACTORY_PATH: sw-ngc-data-platform-pypi/multi-storage-client/${CI_COMMIT_TAG}/
  script:
    # Skip upload if artifacts for the tag already exist.
    - |
      nix develop --command bash -c "
        jf rt search \
          --url ${URM_ARTIFACTORY_URL} \
          --user ${URM_ARTIFACTORY_USERNAME} \
          --password ${URM_ARTIFACTORY_PASSWORD} \
          --fail-no-op \
          ${URM_ARTIFACTORY_PATH} ||
        (
          just package &&
          jf rt upload \
            --url ${URM_ARTIFACTORY_URL} \
            --user ${URM_ARTIFACTORY_USERNAME} \
            --password ${URM_ARTIFACTORY_PASSWORD} \
            --detailed-summary \
            --fail-no-op \
            --flat \
            --quiet \
            --target-props 'component_name=multi_storage_client;version=${CI_COMMIT_TAG};arch=any;os=any;changelist=${CI_COMMIT_SHORT_SHA};branch=release;release_approver=${GITLAB_USER_LOGIN};release_status=ready' \
            dist/multi_storage_client-${CI_COMMIT_TAG}-*-none-any.whl \
            ${URM_ARTIFACTORY_PATH}
        )
      "
  artifacts:
    paths:
      - dist

Publish GitHub:
  extends:
    - .default
  variables:
    # Clones can't be shallow when pushing.
    #
    # https://docs.gitlab.com/ee/ci/runners/configure_runners.html#shallow-cloning
    GIT_DEPTH: 0
    GIT_PUSH_REFERENCES: refs/tags/${CI_COMMIT_TAG}
  rules:
    # Only mirror the default branch for latest releases, not backport releases.
    - if: $CI_COMMIT_TAG_MESSAGE == "latest"
      variables:
        # Tags must be dereferenced to commits when pushing to branches.
        #
        # https://git-scm.com/docs/git-rev-parse#Documentation/git-rev-parse.txt-emltrevgtlttypegtemegemv0998commitem
        GIT_PUSH_REFERENCES: refs/tags/${CI_COMMIT_TAG} refs/tags/${CI_COMMIT_TAG}^{commit}:refs/heads/${CI_DEFAULT_BRANCH}
  script:
    - |
      nix develop --command bash -c "
        eval $(ssh-agent -s)
        mkdir --parents ~/.ssh &&
        chmod 644 ${GITHUB_SSH_PUBLIC_KEY_FINGERPRINTS} &&
        cp -p ${GITHUB_SSH_PUBLIC_KEY_FINGERPRINTS} ~/.ssh/known_hosts &&
        chmod 400 ${GITHUB_DEPLOY_SSH_PRIVATE_KEY} &&
        ssh-add ${GITHUB_DEPLOY_SSH_PRIVATE_KEY} &&
        git push --atomic --force git@github.com:NVIDIA/multi-storage-client.git ${GIT_PUSH_REFERENCES}
      "
